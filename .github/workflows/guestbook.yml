name: "Update Guestbook (chat)"

on:
  issue_comment: { types: [created, edited, deleted] }
  issues:        { types: [opened, edited, deleted] }
  workflow_dispatch:

permissions:
  contents: write
  issues: read

jobs:
  render:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ISSUE_NUMBER = 1; // <- 너의 게스트북 이슈 번호

            // 1) 댓글 수집 (페이지네이션)
            const query = `
              query($owner:String!, $name:String!, $issue_number:Int!, $after:String) {
                repository(owner:$owner, name:$name){
                  issue(number:$issue_number) {
                    comments(first:100, orderBy:{direction:DESC, field:UPDATED_AT}, after:$after) {
                      nodes {
                        author { avatarUrl(size: 40) login url }
                        url
                        body
                        updatedAt
                      }
                      pageInfo { hasNextPage endCursor }
                    }
                  }
                }
              }`;
            const vars = { owner: context.repo.owner, name: context.repo.repo, issue_number: ISSUE_NUMBER, after: null };
            let nodes = [];
            while (true) {
              const res = await github.graphql(query, vars);
              const page = res.repository.issue.comments;
              nodes = nodes.concat(page.nodes);
              if (!page.pageInfo.hasNextPage) break;
              vars.after = page.pageInfo.endCursor;
            }

            // 2) 유틸
            const esc = (s='') =>
              s.replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;')
               .replace(/"/g,'&quot;').replace(/'/g,'&#39;');
            const withBr = (s='') => esc(s).replace(/\r?\n/g,'<br />');

            // 지역시간: 'UTC' → 'Asia/Seoul'로 바꾸고 싶으면 timeZone만 수정
            const fmt = iso => new Date(iso).toLocaleString('en-US', { timeZone:'UTC', hour12:false });

            // 3) 채팅 버블 HTML 생성 (최근 10개)
            const MAX = 10;
            const recent = nodes.slice(0, MAX);

            const bubbles = recent.map(c => [
  '<div style="display:flex; gap:10px; margin:10px 0;">',
  `  <a href="${c.author.url}" target="_blank" style="text-decoration:none;">`,
  `    <img src="${c.author.avatarUrl}" alt="${esc(c.author.login)}" width="40" height="40" style="border-radius:50%;"/>`,
  '  </a>',
  '  <div style="flex:1;">',
  '    <div style="display:flex; align-items:baseline; gap:8px; flex-wrap:wrap;">',
  `      <a href="${c.author.url}" target="_blank" style="font-weight:600; text-decoration:none;">${esc(c.author.login)}</a>`,
  `      <a href="${c.url}" target="_blank" style="color:#64748b; font-size:12px; text-decoration:none;">${fmt(c.updatedAt)}</a>`,
  '    </div>',
  `    <div style="background:#f6f8fa; border:1px solid #e5e7eb; border-radius:10px; padding:10px; margin-top:6px; line-height:1.5;">${withBr(c.body)}</div>`,
  '  </div>',
  '</div>'
].join('\n')).join('\n');

            // 4) 스크롤 컨테이너
            const container = `
<div style="max-height:360px; overflow-y:auto; padding:6px 8px; border:1px solid #e5e7eb; border-radius:12px; background:#fff;">
  ${bubbles || '<div style="color:#64748b;">No entries yet — be the first!</div>'}
</div>
            `.trim();

            // 5) README 마커 사이 교체
            const fs = require('fs');
            const path = 'README.md';
            const start = '<!-- Guestbook -->';
            const end = '<!-- /Guestbook -->';
            const readme = fs.readFileSync(path, 'utf8');
            const re = new RegExp(`(?<=${start}[\\s\\S]*?\\n)[\\s\\S]*?(?=${end}|$(?![\\n]))`, 'm');

            const next = readme.match(re)
              ? readme.replace(re, container)
              : readme.replace(start, `${start}\n${container}\n`);

            if (next !== readme) {
              fs.writeFileSync(path, next, 'utf8');
              const { data } = await github.rest.repos.getContent({ owner: context.repo.owner, repo: context.repo.repo, path });
              await github.rest.repos.createOrUpdateFileContents({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path,
                message: 'chore: update guestbook (chat)',
                content: Buffer.from(next).toString('base64'),
                sha: data.sha
              });
            }
