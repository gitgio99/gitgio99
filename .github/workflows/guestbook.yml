name: Update Guestbook

on:
  issue_comment:
    types: [created, edited, deleted]
  issues:
    types: [opened, edited, deleted]
  workflow_dispatch:
  schedule:
    - cron: "0 */12 * * *" # 선택: 12시간마다 재생성

permissions:
  contents: write
  issues: read

jobs:
  render:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build guestbook table and update README
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const ISSUE_NUMBER = 1; // <- 이슈 번호

            const query = `
              query($owner:String!, $name:String!, $issue_number:Int!, $after:String) {
                repository(owner:$owner, name:$name){
                  issue(number:$issue_number) {
                    comments(first:100, orderBy:{direction:DESC, field:UPDATED_AT}, after:$after) {
                      nodes {
                        author { avatarUrl(size: 48) login url }
                        url
                        body
                        updatedAt
                      }
                      pageInfo { hasNextPage endCursor }
                    }
                  }
                }
              }`;

            const vars = { owner: context.repo.owner, name: context.repo.repo, issue_number: ISSUE_NUMBER, after: null };

            // 모든 댓글 수집
            let nodes = [];
            while (true) {
              const res = await github.graphql(query, vars);
              const page = res.repository.issue.comments;
              nodes = nodes.concat(page.nodes);
              if (!page.pageInfo.hasNextPage) break;
              vars.after = page.pageInfo.endCursor;
            }

            const esc = (s='') => s
              .replace(/[\u0000-\u001F]/g, '')
              .replace(/\|/g, '&#124;')
              .replace(/\[/g, '&#91;').replace(/\]/g, '&#93;')
              .replace(/</g, '&lt;').replace(/>/g, '&gt;')
              .replace(/`/g, '&#96;')
              .replace(/\r?\n/g, '<br />');

            const fmt = iso => new Date(iso).toLocaleString('en-US', { timeZone: 'UTC', hour12: false });

            const header = "| Name | Date | Message |\n|---|---|---|\n";
            const body = nodes.reduce((acc, c) => {
              const name = `[<img src="${c.author.avatarUrl}" alt="${c.author.login}" width="48" /><br />${esc(c.author.login)}](${c.author.url})`;
              const date = `${fmt(c.updatedAt)}<br />[Open ↗](${c.url})`;
              return acc + `| ${name} | ${date} | ${esc(c.body)} |\n`;
            }, "");
            const table = header + body;

            const fs = require('fs');
            const path = 'README.md';
            const start = '<!-- Guestbook -->';
            const end = '<!-- /Guestbook -->';
            const readme = fs.readFileSync(path, 'utf8');
            const re = new RegExp(`(?<=${start}[\\s\\S]*?\\n)[\\s\\S]*?(?=${end}|$(?![\\n]))`, 'm');

            const next = readme.match(re)
              ? readme.replace(re, table)
              : readme.replace(start, `${start}\n${table}\n`);

            if (next !== readme) {
              fs.writeFileSync(path, next, 'utf8');
              const { data } = await github.rest.repos.getContent({ owner: context.repo.owner, repo: context.repo.repo, path });
              await github.rest.repos.createOrUpdateFileContents({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path,
                message: 'chore: update guestbook',
                content: Buffer.from(next).toString('base64'),
                sha: data.sha
              });
            }
